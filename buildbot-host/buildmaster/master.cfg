# -*- python -*-
# ex: set filetype=python:

from twisted.internet import defer
from buildbot.plugins import *
from buildbot.plugins import secrets, util
import configparser
import json
import multiprocessing
import os
import random
import time

def get_worker_setting(config, worker_name, setting):
    """Load a worker setting from worker.ini"""
    worker_config = config

    try:
        value = worker_config.get(worker_name, setting)
    except configparser.NoOptionError:
        value = None

    return value

def get_config(name):
    """Return active master configuration"""
    config = configparser.ConfigParser()

    custom = f'{name}.ini'
    default = f'{name}-default.ini'

    if os.path.exists(custom):
        config.read(custom)
    elif os.path.exists(default):
        config.read(default)
    else:
        print(f'ERROR: could not find {custom} or {default}')
        sys.exit(1)

    return config

# Load configuration from configuration files
worker_config = get_config("worker")
master_config = get_config("master")

c = BuildmasterConfig = {}

persistent_dir = os.path.expanduser(os.path.join(basedir, "persistent"))
repo_url = master_config.get("master", "repo_url")
branch = master_config.get("master", "branch")
notify_email = master_config.get("master", "notify_email")
master_fqdn = master_config.get("master", "master_fqdn")
buildbot_url = master_config.get("master", "buildbot_url")
title_url = master_config.get("master", "title_url")
docker_host = master_config.get("docker", "host", raw=True)
docker_network = master_config.get("docker", "network")

# Each section in worker.ini represents one buildbot worker. The "DEFAULT"
# section gives the default settings and gets filtered out automatically, i.e.
# does not become a worker.
worker_names = worker_config.sections()
builder_names = []

packaging_config_opt_combos = [""]

build_and_test_config_opt_combos = [
    "",
    "--with-crypto-library=mbedtls --enable-crypto"
]

config_opt_combos = [
    "--disable-lz4",
    "--disable-lzo",
    "--disable-lzo --disable-lz4 --enable-comp-stub",
    "--disable-lzo --disable-management",
    "--disable-management",
    "--disable-server --enable-small",
    "--enable-small"
]

c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.path.join(persistent_dir, "secrets"))]

c['workers'] = []

# Create normal and latent workers
for worker_name in worker_names:
    if worker_config.get(worker_name, "type") ==  "latent_docker":
      image = worker_config.get(worker_name, "image")
      c['workers'].append(worker.DockerLatentWorker(worker_name,
                                                    worker_config.get(worker_name, "password"),
                                                    max_builds=1,
                                                    notify_on_missing=notify_email,
                                                    docker_host=docker_host,
                                                    image=image,
                                                    masterFQDN="buildmaster",
                                                    volumes=[f'buildbot-worker-{worker_name}:/home/buildbot'],
                                                    hostconfig = { "network_mode": docker_network,
                                                                   "sysctls": { "net.ipv6.conf.all.disable_ipv6": 0 },
                                                                   "cap_add": ["NET_ADMIN"] }))
    else:
        c['workers'].append(worker.Worker(worker_name,
                            util.Secret("worker-password"),
                            max_builds=1,
                            notify_on_missing=notify_email,
                            properties = { 'signing_cert_sha1': get_worker_setting(worker_config, worker_name, 'signing_cert_sha1'), 'timestamp_url': get_worker_setting(worker_config, worker_name, 'timestamp_url')}))

c['protocols'] = {'pb': {'port': 9989}}

c['change_source'] = []
c['change_source'].append(changes.GitPoller(repo_url,
                                            workdir='gitpoller-workdir', branch=branch,
                                            pollInterval=10))

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                        name="all",
                        change_filter=util.ChangeFilter(branch=branch),
                        treeStableTimer=None,
                        builderNames=builder_names))

c['schedulers'].append(schedulers.ForceScheduler(
                        name="force",
                        builderNames=builder_names))

c['builders'] = []

# Allow only two concurrent builds across all latent docker workers
cpus = multiprocessing.cpu_count()
docker_build_lock = util.MasterLock("docker", maxCount=cpus)

# Only allow one docker worker to run t_client tests at the same time. This is
# convenience feature to reduce the number of keys required for t_client tests.
docker_tclient_lock = util.MasterLock("docker", maxCount=1)

factories = {}

def getBuilderNameSuffix(combo):
    """Generate builder name suffix from configure options"""
    if not combo:
      return "-default"
    else:
      return combo.replace(" ", "")

def getFactoryName(combo):
    return f'factory{getBuilderNameSuffix(combo)}'

def addCommonWindowsStepsToBuildFactory(factory, combo):

    # Set the work directory to "openvpn" instead of the default ("build"). This is needed 
    # for MSI packaging which expects to find files from ..\..\openvpn.
    factory.workdir = "openvpn"

    factory.addStep(steps.Git(repourl=repo_url,
                                mode="incremental",
                                name="clone openvpn",
                                description="cloning",
                                descriptionDone="cloning"))

    # Update and build dependencies for OpenVPN and OpenVPN GUI
    factory.addStep(steps.ShellCommand(command=["git.exe", "pull"],
                                        workdir="vcpkg",
                                        name="pull latest ports",
                                        description="pulling",
                                        descriptionDone="pulling"))

    factory.addStep(steps.ShellCommand(command=["bootstrap-vcpkg.bat"],
                                        workdir="vcpkg",
                                        name="bootstrap vcpkg",
                                        description="bootstrapping",
                                        descriptionDone="bootstrapping"))

    factory.addStep(steps.ShellCommand(command=[".\\vcpkg.exe", "upgrade", "--overlay-ports", util.Interpolate('%(prop:builddir)s\\openvpn\\contrib\\vcpkg-ports'), "--overlay-triplets", util.Interpolate('%(prop:builddir)s\\openvpn\\contrib\\vcpkg-triplets'), "--no-dry-run"],
                                        workdir="vcpkg",
                                        name="build ports",
                                        description="updating",
                                        descriptionDone="updating"))
    # Update and build openvpn-gui. It does not (yet) have a proper MSVC
    # buildsystem. So, we build executables for x86, x64 and arm64 using a
    # Powershell wrapper.
    factory.addStep(steps.ShellCommand(command=["git.exe", "pull"],
                                        workdir="openvpn-gui",
                                        name="pull latest openvpn-gui",
                                        description="pulling",
                                        descriptionDone="pulling"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/build-openvpn-gui.ps1",
                                        workerdest="..\\openvpn-gui\\build-openvpn-gui.ps1",
                                        name="download openvpn-gui build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["Powershell.exe", "-Executionpolicy", "RemoteSigned", "-File", "..\\openvpn-gui\\build-openvpn-gui.ps1"],
                                        env={'CMAKE_TOOLCHAIN_FILE': util.Interpolate('%(prop:builddir)s\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake'),
                                             'CMAKE': 'C:\\Program Files\\CMake\\bin\\cmake.exe'},
                                        name="build openvpn-gui",
                                        description="building",
                                        descriptionDone="building"))

    # The following steps build OpenVPN using msbuild by calling wrapper
    # scripts that configure the environment properly.
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64.bat",
                                        workerdest="msbuild-x64.bat",
                                        name="download openvpn x64 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64.bat"],
                                        name="build openvpn x64",
                                        description="building",
                                        descriptionDone="building"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_x86.bat",
                                        workerdest="msbuild-x64_x86.bat",
                                        name="download openvpn x86 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_x86.bat"],
                                        name="build openvpn x86",
                                        description="building",
                                        descriptionDone="building"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_arm64.bat",
                                        workerdest="msbuild-x64_arm64.bat",
                                        name="download openvpn arm64 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_arm64.bat"],
                                        name="build openvpn arm64",
                                        description="building",
                                        descriptionDone="building"))

    # Sign the generated binaries and MSI files using a wrapper script that
    # loads the Visual Studio development environment to ensure that
    # signtool.exe is in PATH.
    #
    # If the parameters required for signing have not been defined for the
    # worker then skip this step.
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/sign-binaries.bat",
                                        workerdest="..\\openvpn-build\\windows-msi\\sign-binaries.bat",
                                        name="download signing script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "sign-binaries.bat"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="sign binaries",
                                        description="signing",
                                        descriptionDone="signing",
                                        doStepIf=can_sign,
                                        env={'SignScript': 'sign-openvpn.bat',
                                             'ManifestTimestampRFC3161Url': util.Property('timestamp_url'),
                                             'ManifestCertificateThumbprint': util.Property('signing_cert_sha1')}))

    # Generate MSI packages
    factory.addStep(steps.ShellCommand(command=["cscript.exe", "build.wsf", "msi"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="package",
                                        description="packaging",
                                        descriptionDone="packaging"))

    # Sign the MSI installers. If the parameters required for signing have not
    # been defined for the worker then skip this step.
    factory.addStep(steps.ShellCommand(command=["call", "sign-binaries.bat"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="sign msi",
                                        description="signing",
                                        descriptionDone="signing",
                                        doStepIf=can_sign,
                                        env={'SignScript': 'sign-msi.bat',
                                             'ManifestTimestampRFC3161Url': util.Property('timestamp_url'),
                                             'ManifestCertificateThumbprint': util.Property('signing_cert_sha1')}))

    return factory

def addCommonUnixStepsToBuildFactory(factory, combo):
    factory.addStep(steps.Git(repourl=repo_url,
                                mode='incremental',
                                name="clone",
                                description="cloning",
                                descriptionDone="cloning"))

    factory.addStep(steps.ShellCommand(command=["autoreconf", "-v", "-i"],
                                        name="autoreconf",
                                        description="reconfiguring",
                                        descriptionDone="reconfiguring"))

    configure = ["./configure"] + combo.split(" ")

    factory.addStep(steps.ShellCommand(command=configure,
                                        name="configure",
                                        description="configuring",
                                        descriptionDone="configuring"))

    factory.addStep(steps.ShellCommand(command=["make", "clean"],
                                        name="clean",
                                        description="cleaning",
                                        descriptionDone="cleaning"))

    factory.addStep(steps.ShellCommand(command=["make"],
                                        name="compile",
                                        description="compiling",
                                        descriptionDone="compiling"))

    return factory

def addTClientStepsToBuildFactory(factory, combo):
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "/home/buildbot/t_client.rc", "."],
                                        name="copy t_client.rc",
                                        description="copying",
                                        descriptionDone="copying"))

    # The tclient.sh script populates the t_client_ips.rc file automatically.
    # This step ensure that we have at least an empty t_client_ips.rc file
    # available for t_client.sh.
    factory.addStep(steps.ShellCommand(command=["touch", "t_client_ips.rc"],
                                        name="touch t_client_ips.rc",
                                        description="touching",
                                        descriptionDone="touching"))


    # These steps restore a cached t_client_ips.rc, if any. On the first run it won't exist.
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "/home/buildbot/t_client_ips.rc", "."],
                                        name="restore t_client_ips.rc",
                                        description="restoring",
                                        descriptionDone="restoring"))

    # Copy the current t_client_ips.rc out of the build directory to restore it later.
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "t_client_ips.rc", "/home/buildbot/t_client_ips.rc"],
                                        name="cache t_client_ips.rc",
                                        description="caching",
                                        descriptionDone="caching"))

    # Docker container don't have a tun device by default, so ensure they get
    # one. While this script will run on all *NIX workers, it is a no-op
    # outside of Docker.
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/ensure-tun-is-present.sh",
                                        workerdest="ensure-tun-is-present.sh",
                                        mode=0o755,
                                        name="download",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["./ensure-tun-is-present.sh"],
                                        name="ensure tun in docker",
                                        description="ensuring",
                                        descriptionDone="ensuring"))

    # Run the tests, including t_client.sh
    factory.addStep(steps.ShellCommand(command=["make", "check"],
                                        name="run tests",
                                        description="testing",
                                        descriptionDone="testing"))

    return factory

def can_sign(buildstep):
    """Check if this worker can sign binaries"""
    worker_name = buildstep.worker.workername
    worker_config = configparser.ConfigParser()
    worker_config.read("worker.ini")
    sign_capable = True

    try:
        worker_config.get(worker_name, "timestamp_url")
        worker_config.get(worker_name, "signing_cert_sha1")
    except configparser.NoOptionError:
        sign_capable = False

    return sign_capable

# Basic compile tests on Unix-style operating systems
for combo in config_opt_combos:
    factory = util.BuildFactory()
    factory = addCommonUnixStepsToBuildFactory(factory, combo)
    factory_name = getFactoryName(combo)
    factories.update({factory_name: (factory, 'unix')})
    del factory

# Connectivity tests on Unix-style operating systems
if master_config.get("master", "run_tclient_tests") == "True":
    for combo in build_and_test_config_opt_combos:
        factory = util.BuildFactory()
        factory = addCommonUnixStepsToBuildFactory(factory, combo)
        factory = addTClientStepsToBuildFactory(factory, combo)
        factory_name = getFactoryName(combo)
        factories.update({factory_name: (factory, 'unix')})
        del factory

# Debian and Ubuntu packaging
#
for combo in packaging_config_opt_combos:
    factory = util.BuildFactory()
    factory = addCommonUnixStepsToBuildFactory(factory, "")
    factory_name = getFactoryName("-package")
    factories.update({factory_name: (factory, 'unix')})
    del factory

# Windows msbuild tests
factory = util.BuildFactory()
factory = addCommonWindowsStepsToBuildFactory(factory, combo)
factory_name = "msbuild"
factories.update({factory_name: (factory, 'windows')})
del factory

# Create the builders
for factory_name, factory in factories.items():
    for worker_name in worker_names:
      # Check if this factory is applicable for the worker's operating system
      if not factory[1] == worker_config.get(worker_name, "ostype"):
          continue

      # Concurrent docker builds utilize a shared master lock in counting mode.
      # In human-speak we only allow two concurrent Docker builders to run at
      # any given time.
      if worker_config.get(worker_name, "type") == "latent_docker":
          # Builder-level locks affect the entire build
          locks = [docker_build_lock.access('counting')]
      else:
          locks = None

      builder_name = f'{worker_name}-{factory_name}'
      c['builders'].append(
          util.BuilderConfig(name=builder_name,
                                workernames=[worker_name],
                                factory=factory[0],
                                locks=locks))

      builder_names.append(builder_name)

c['services'] = []
c['title'] = "OpenVPN community buildbot"
c['titleURL'] = title_url
c['buildbotURL'] = buildbot_url
c['www'] = {
    'port': 8010,
    'plugins': { 'waterfall_view': True, }
}

c['db'] = {
    'db_url' : f'sqlite:////{persistent_dir}/libstate.sqlite',
}
