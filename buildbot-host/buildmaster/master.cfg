# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.plugins import secrets, util
#from copy import deepcopy
import os
import configparser
import json

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Load worker configuration
worker_config = configparser.ConfigParser()
worker_config.read("worker.ini")

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

persistent_dir = os.path.expanduser(os.path.join(basedir, "persistent"))
repo_url = "https://github.com/mattock/openvpn.git"
branch = "dockertest"
notify_email = "root@localhost"

# Each section in worker.ini represents one buildbot worker. The "DEFAULT"
# section gets filtered out automatically.
worker_names = worker_config.sections()
builder_names = []

config_opt_combos = [
    "",
    #"--disable-lz4",
    #"--disable-lzo",
    #"--disable-lzo --disable-lz4 --enable-comp-stub",
    #"--disable-lzo --disable-management",
    #"--disable-management",
    #"--disable-server --enable-small",
    #"--enable-small",
    #"--with-crypto-library=mbedtls --enable-crypto"
]

c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.path.join(persistent_dir, "secrets"))]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

for worker_name in worker_names:
    # Static worker
    #c['workers'].append(worker.Worker(worker_name, util.Secret("worker-password"), max_builds=1, notify_on_missing=notify_email))
    image = worker_config.get(worker_name, "image")
    c['workers'].append(worker.DockerLatentWorker(worker_name,
                                                  "vagrant",
                                                  max_builds=1,
                                                  notify_on_missing=notify_email,
                                                  docker_host='tcp://172.18.0.1:2375',
                                                  image=image,
                                                  masterFQDN="buildmaster",
                                                  hostconfig = { "network_mode": "buildbot-net" }
                                                  ))

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        repo_url,
        workdir='gitpoller-workdir', branch=branch,
        pollInterval=10))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch=branch),
                            treeStableTimer=None,
                            builderNames=builder_names))
#c['schedulers'].append(schedulers.ForceScheduler(
#                            name="force",
#                            builderNames=["openvpn2-compile-ubuntu-1804", "openvpn2-compile-ubuntu-2004"]))
#
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

# Basic compile test

factories = {}

debug_log = open('/var/lib/buildbot/masters/default/debug.log', 'a')

for combo in config_opt_combos:
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl=repo_url, mode='incremental'))
    factory.addStep(steps.ShellCommand(command=["autoreconf", "-v", "-i"]))
    configure = ["./configure"] + combo.split(" ")
    factory.addStep(steps.ShellCommand(command=configure))
    factory.addStep(steps.ShellCommand(command=["make", "clean"]))
    factory.addStep(steps.ShellCommand(command=["make"]))
    if not combo:
      combo_wo_spaces = "-default"
    else:
      combo_wo_spaces = combo.replace(" ", "")
    factory_name = f'factory{combo_wo_spaces}'
    factories.update({factory_name: factory})
    debug_log.write(factory_name + "\n")
    del factory

debug_log.close()

for factory_name, factory in factories.items():
    for worker_name in worker_names:
      builder_name = f'{worker_name}-{factory_name}'
      c['builders'].append(
          util.BuilderConfig(name=builder_name,
            workernames=[worker_name],
            factory=factory))
      builder_names.append(builder_name)

# Compile test plus local tests
#local_test_factory = deepcopy(compile_factory)
#local_test_factory.addStep(steps.ShellCommand(command=["make", "check"])

#c['builders'].append(
#    util.BuilderConfig(name="openvpn2-compile-ubuntu-2004",
#      workernames=["ubuntu-2004"],
#      factory=compile_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "OpenVPN community buildbot"
c['titleURL'] = "https://buildmaster.vagrant.local"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://192.168.48.114:8010/"

# minimalistic config to activate new web UI
#c['www'] = dict(port=8010,
#                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

c['www'] = {
    'port': 8010,
    'plugins': { 'waterfall_view': True, }
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : f'sqlite:////{persistent_dir}/libstate.sqlite',
}
