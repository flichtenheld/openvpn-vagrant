# -*- python -*-
# ex: set filetype=python:
def addCommonWindowsStepsToBuildFactory(factory, combo):

    # Set the work directory to "openvpn" instead of the default ("build"). This is needed 
    # for MSI packaging which expects to find files from ..\..\openvpn.
    factory.workdir = "openvpn"

    factory.addStep(steps.Git(repourl=openvpn_repo_url,
                                mode="incremental",
                                name="clone openvpn",
                                description="cloning",
                                descriptionDone="cloning"))

    # Update and build dependencies for OpenVPN and OpenVPN GUI
    factory.addStep(steps.ShellCommand(command=["git.exe", "pull"],
                                        workdir="vcpkg",
                                        name="pull latest ports",
                                        description="pulling",
                                        descriptionDone="pulling"))

    factory.addStep(steps.ShellCommand(command=["bootstrap-vcpkg.bat"],
                                        workdir="vcpkg",
                                        name="bootstrap vcpkg",
                                        description="bootstrapping",
                                        descriptionDone="bootstrapping"))

    factory.addStep(steps.ShellCommand(command=[".\\vcpkg.exe", "upgrade", "--overlay-ports", util.Interpolate('%(prop:builddir)s\\openvpn\\contrib\\vcpkg-ports'), "--overlay-triplets", util.Interpolate('%(prop:builddir)s\\openvpn\\contrib\\vcpkg-triplets'), "--no-dry-run"],
                                        workdir="vcpkg",
                                        name="build ports",
                                        description="updating",
                                        descriptionDone="updating"))
    # Update and build openvpn-gui. It does not (yet) have a proper MSVC
    # buildsystem. So, we build executables for x86, x64 and arm64 using a
    # Powershell wrapper.
    factory.addStep(steps.ShellCommand(command=["git.exe", "pull"],
                                        workdir="openvpn-gui",
                                        name="pull latest openvpn-gui",
                                        description="pulling",
                                        descriptionDone="pulling"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/build-openvpn-gui.ps1",
                                        workerdest="..\\openvpn-gui\\build-openvpn-gui.ps1",
                                        name="download openvpn-gui build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["Powershell.exe", "-Executionpolicy", "RemoteSigned", "-File", "..\\openvpn-gui\\build-openvpn-gui.ps1"],
                                        env={'CMAKE_TOOLCHAIN_FILE': util.Interpolate('%(prop:builddir)s\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake'),
                                             'CMAKE': 'C:\\Program Files\\CMake\\bin\\cmake.exe'},
                                        name="build openvpn-gui",
                                        description="building",
                                        descriptionDone="building"))

    # The following steps build OpenVPN using msbuild by calling wrapper
    # scripts that configure the environment properly.
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64.bat",
                                        workerdest="msbuild-x64.bat",
                                        name="download openvpn x64 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64.bat"],
                                        name="build openvpn x64",
                                        description="building",
                                        descriptionDone="building"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_x86.bat",
                                        workerdest="msbuild-x64_x86.bat",
                                        name="download openvpn x86 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_x86.bat"],
                                        name="build openvpn x86",
                                        description="building",
                                        descriptionDone="building"))

    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_arm64.bat",
                                        workerdest="msbuild-x64_arm64.bat",
                                        name="download openvpn arm64 build script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_arm64.bat"],
                                        name="build openvpn arm64",
                                        description="building",
                                        descriptionDone="building"))

    # Sign the generated binaries and MSI files using a wrapper script that
    # loads the Visual Studio development environment to ensure that
    # signtool.exe is in PATH.
    #
    # If the parameters required for signing have not been defined for the
    # worker then skip this step.
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/sign-binaries.bat",
                                        workerdest="..\\openvpn-build\\windows-msi\\sign-binaries.bat",
                                        name="download signing script",
                                        description="downloading",
                                        descriptionDone="downloading"))

    factory.addStep(steps.ShellCommand(command=["call", "sign-binaries.bat"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="sign binaries",
                                        description="signing",
                                        descriptionDone="signing",
                                        doStepIf=can_sign,
                                        env={'SignScript': 'sign-openvpn.bat',
                                             'ManifestTimestampRFC3161Url': util.Property('timestamp_url'),
                                             'ManifestCertificateThumbprint': util.Property('signing_cert_sha1')}))

    # Generate MSI packages
    factory.addStep(steps.ShellCommand(command=["cscript.exe", "build.wsf", "msi"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="package",
                                        description="packaging",
                                        descriptionDone="packaging"))

    # Sign the MSI installers. If the parameters required for signing have not
    # been defined for the worker then skip this step.
    factory.addStep(steps.ShellCommand(command=["call", "sign-binaries.bat"],
                                        workdir="openvpn-build\\windows-msi",
                                        name="sign msi",
                                        description="signing",
                                        descriptionDone="signing",
                                        doStepIf=can_sign,
                                        env={'SignScript': 'sign-msi.bat',
                                             'ManifestTimestampRFC3161Url': util.Property('timestamp_url'),
                                             'ManifestCertificateThumbprint': util.Property('signing_cert_sha1')}))

    return factory

